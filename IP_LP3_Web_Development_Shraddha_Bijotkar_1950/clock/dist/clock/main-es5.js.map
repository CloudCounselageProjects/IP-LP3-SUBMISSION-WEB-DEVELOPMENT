{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/apis.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","ApisService","httpClient","get","observe","providedIn","AppComponent","apis","http","title","getTime","subscribe","data","T","console","log","onClick","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { from, Observable, throwError } from 'rxjs';\nimport { T } from './t';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApisService {\n  info : string\n  constructor(private httpClient: HttpClient) {  }\n\n  getTime() : Observable<T[]> {\n    return this.httpClient.get<T[]>('http://localhost:5000', {observe : \"body\"})\n   \n  } \n \n}\n","import { Component } from '@angular/core';\nimport { ApisService } from './apis.service'\nimport { HttpClient } from '@angular/common/http';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor(private apis : ApisService , private http : HttpClient){}\n  T ;\n  info ;\nonClick(){\n  return this.apis\n  .getTime()\n  .subscribe((data) => {\n    this.T = data,\n    //JSON.stringify(Times);\n    console.log(this.T)})\n}\n\n  title = 'clock';\n}\n","<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n<div>\n  <mat-toolbar color=\"primary\"><span>TIME IS MONEY</span></mat-toolbar>\n\n<br>\n</div>\n\n<div class=\"divi\">\n\n\n<div class=\"col-sm-3 col-md-6\" style=\"text-align: center;display: flex; justify-content: center; align-content: center;  max-width: 500px; max-height: 400px;\">\n  <mat-card class=\"example-card\">\n    <mat-card-header>\n      <div mat-card-avatar class=\"example-header-image\" style=\"align-items: center\"></div>\n      <mat-card-title style=\"align-items: center;\">INDIA </mat-card-title>\n      <mat-card-subtitle style=\"align-items: center;\">IST - Indian Standard Time</mat-card-subtitle>\n    </mat-card-header>\n    <img mat-card-image src=\"../assets/india.jpg\" alt=\"INDIA\">\n    <mat-card-content>\n      <p class=\"div3\">\n        *India, officially the Republic of India\n       is a country in South Asia. It is the second-most populous country, the seventh-largest country by area, and the most populous democracy in the world. \n      </p>\n    </mat-card-content>\n    \n\n  </mat-card>\n\n  </div>\n  <div class=\"col-sm-9 col-md-6\">\n  <button style=\" margin-left: 80px !important; margin-top: 50px !important;\" mat-button class= \"button button1\"  (click)=\"onClick()\">WHAT'S THE TIME?</button>\n  <div class=\"div2\">\n\n<h3 class=\"div3\">Time in  \" {{T.timezone}} \"  is :  {{T.datetime.slice(11,19)}}  and date is : {{T.datetime.slice(0,10)}}</h3>\n\n<h3 class=\"div3\">It's week {{T.week_number}} of year {{T.datetime.slice(0,4)}} in INDIA!</h3>\n</div>\n</div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { ApisService } from './apis.service';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport {MatCardModule } from '@angular/material/card';\nimport {MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n  import { from } from 'rxjs';\n  @NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatButtonModule,\n    MatIconModule\n  ],\n  providers: [ApisService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}